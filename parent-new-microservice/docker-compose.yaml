services:

#  discovery-server:
#    build:
#      context: ./discovery-server
#      dockerfile: Dockerfile
#    ports:
#      - "8761:8761"
#    networks:
#      - app-network
#
#  api-gateway:
#      build:
#        context: ./api-gateway
#        dockerfile: Dockerfile
#      ports:
#        - "8080:8080"
#      environment:
#        EUREKA_SERVER_URL: http://discovery-server:8761/eureka
#      depends_on:
#        - discovery-server
#      networks:
#        - app-network
#
#  order-service:
#      build:
#        context: ./order-service
#        dockerfile: Dockerfile
#      ports:
#        - "8081:8081"
#      environment:
#        SPRING_PROFILES_ACTIVE: docker
#        SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/Order
#      depends_on:
#        - mysql
#        - kafka
#      networks:
#        - app-network
#
#  product-service:
#      build:
#        context: ./product-service
#        dockerfile: Dockerfile
#      ports:
#        - "8082:8082"
#      environment:
#        SPRING_PROFILES_ACTIVE: docker
#        SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/Product
#      depends_on:
#        - mysql
#        - kafka
#      networks:
#        - app-network
#
#  inventory-service:
#      build:
#        context: ./inventory-service
#        dockerfile: Dockerfile
#      ports:
#        - "8083:8083"
#      environment:
#        SPRING_PROFILES_ACTIVE: docker
#        SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/Inventory
#      depends_on:
#        - mysql
#        - kafka
#      networks:
#        - app-network
#
#  mysql:
#    container_name: mysql
#    image: mysql:8.0.36
#    restart: always
#    environment:
#      MYSQL_DATABASE: db
#      MYSQL_USER: user
#      MYSQL_PASSWORD: password
#      MYSQL_ROOT_PASSWORD: 99@QWERkim611
#    ports:
#      - '3307:3306'
#    volumes:
#      - my-db:/var/lib/mysql
#
#    networks:
#      - app-network


  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:25.0.4
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - 8181:8080
    command: ["start-dev"]
    volumes:
      - ./keycloak_data:/opt/keycloak/data

  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin
    restart: unless-stopped
    ports:
      - 9411:9411

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092, PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    restart: unless-stopped

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8090:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: true
      KAFKA_CLUSTER_0_NAME: local-cluster
      KAFKA_CLUSTER_0_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_CLUSTER_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    restart: unless-stopped
#    depends_on:
#      - product-service
#      - inventory-service
#      - notification-service
#      - order-service

  grafana:
    image: grafana/grafana:9.1.2
    container_name: grafana
    volumes:
      - ./grafana:/var/lib/grafana
    ports:
      - "3000:3000"
    restart:
      unless-stopped
    links:
      - prometheus:prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
#volumes:
#  my-db:  # This defines the "my-db" volume for MySQL

networks:
  app-network:
    driver: bridge